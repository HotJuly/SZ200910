24.购物车模块(修改商品数量)
  1)观察硅谷商城项目,分析需求:
	1)当点击+,需要将对应商品的数量加一
	2)当点击-,需要将对应商品的数量减一
	3)当商品数量为0时,自动删除
  2)当购物车中没有商品,显示静态页面("赶紧购物把")


25.购物车模块(商品选中状态切换)
  1)通过给cartList内的对象添加selected属性,动态控制商品的选中状态
  2)首次添加入购物车的商品,默认为选中状态
  3)点击某个商品的选中框,切换该商品的选中状态
  4)根据购物车中所有商品的选中状态,控制全选按钮的选中状态
    思路:
	1.当前全选按钮的选中状态会受到cartList数据的影响,所以只用getters
	2.遍历cartList数组
	3.如果有一个商品是未选中状态,全选按钮为未选中状态
	4.如果所有商品都是选中状态,全选按钮为选中状态
	5.如果购物车中没有商品,全选按钮为未选中状态
	6.返回值为布尔值	全选->true 全不选->false
  5)当点击全选按钮,将购物车中所有商品的选中状态设置为当前全选按钮取反之后的状态
	

26.购物车模块(选中商品总数量以及总价格)
    通过getter配合reduce累加器实现
	reduce() 累加器
	1.作用:将数组中某个数据进行累加
	2.语法:arr.reduce((pre,next)=>{return pre+next},累加的初始值)
	首次循环
		没有传入第二个实参(累加的初始值)的情况
		1.pre得到的是数组的第一个元素,next得到的是数组的第二个元素
		有传入第二个实参(累加的初始值)的情况
		2.pre得到的是累加的初始值,next得到的是数组的第一个元素
	再次循环
		pre得到的是上次循环的返回值


27.购物车模块(重点:获取用户唯一标识openId)
  1)无论是点击open-type为getUserInfo的button组件,还是使用wx.getUserInfo方法获取到的用户信息中,都没有用户的唯一标识
  2)想要获取用户的唯一标识需要用到wx.login接口并配合服务器进行
	流程:
		1.客户端通过wx.login()获取到用户的临时登录凭证code
		2.将code发送给我们自己的服务器
		3.服务器将code+appid+appsecret发送给微信官方服务器
		4.微信官方服务器返回session_key以及用户唯一标识openId
		5.在服务器端对openId进行加密,最后返回给客户端
		6.客户端接收到加密之后的openId,并存储到Storage中


28.购物车模块(对openId进行加密操作)
  1)下载jwt加密包,npm install jsonwebtoken
  2)使用方法:
	加密:使用jwt.sign(需要加密的数据,提高解密难度的数据),可以获得加密之后的token
	解密:使用jwt.verify(token,提高解密难度的数据),可以获得加密前的openId
  3)将服务器的openId加密成token,返回给小程序客户端
  4)小程序客户端获得token之后,将token存储至Storage中