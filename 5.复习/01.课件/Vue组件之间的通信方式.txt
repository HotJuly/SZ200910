1.props
	适用于父子组件之间
	父向子传参(传递数据本身)->父组件将数据放在子组件的标签上,作为他的标签属性,最终会被收集到子组件的props
	子向父传参(传递函数)->父组件将自身的method通过标签属性传递给子组件(当前函数的this),子组件调用该方法,传递实参,父组件就可以接收到

2.provide/inject
	适用于祖孙组件之间
	祖先组件在配置对象中使用provide暴露数据,子孙组件在配置对象中使用inject填写数据属性名即可(加强版props)

3.自定义事件
	1)v-model
		1.使用在子组件上
			-将data中的数据作为组件的标签属性值(标签属性名是value)
			-给组件实例绑定input事件(注意:自定义事件,与原生input无关),触发当前自定义事件会同步修改data中对应的属性
		2.使用在input标签上
			-将data中的数据作为input的默认值
			-当用户修改input框的内容(默认绑定input事件,底层绑定的还是原生DOM事件),会同步更新data中对应的属性
	2)$on和$emit
		实现子项目传参,父组件通过@或者$on给子组件绑定自定义事件,传入回调函数(this指向父组件),子组件通过$emit可以触发并传参

	3)事件总线
		可以无视组件关系,实现跨组件通信,注意:订阅者和发布者必须同时存在,否则无效
	
	4).sync修饰符
		用于发v-model几乎相同,区别在于绑定的自定义事件名称会有前缀update:属性名

4.$parent,$children,$refs,$root
	$parent->可以获取到父组件实例
	$children->可以获取到子组件实例组成的数组
	$refs->
		1.使用在标签上
			获取到该标签生成的真实DOM(html标签)
		2.使用在组件上
			获取到该组件的实例对象
	$root->获取到组件树的根实例

5.$attrs,$listener
	$attrs->用于收集当前组件没有接收的标签属性和值
	$listener->用于收集当前组件所有的自定义事件

6.插槽
	1)默认插槽:父组件在子组件标签中间传入template,子组件想要显示这个template,可以使用slot组件进行占位
	2)具名插槽:在父组件传入template的时候,添加v-slot:名称,子组件使用slot组件的时候,添加标签属性name="名称"即可
	3)作用域插槽:在具名插槽的基础上,子组件给通过标签属性给slot组件传递数据,父组件template中使用v-slot:名称="变量名"(该变量类似于props)