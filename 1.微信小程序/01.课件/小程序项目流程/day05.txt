28.每日推荐模块(重点:路由传参)
  1)给每个recommendItem绑定tap事件,当点击之后跳转页面至播放歌曲页面
  2)当页面进行跳转时候,要显示对应歌曲内容的播放歌曲页面,出现问题!!!
	问题1:如何将即将播放歌曲的数据对象,从每日推荐页面传递至播放歌曲页面
	解决:以query格式进行路由传参,播放歌曲页面通过onLoad的形参options接收
	
	问题2:经过问题1,我们成功将数据对象传给了播放歌曲页面,但是由于url长度限制,数据无法完整传到播放歌曲页面
	解决:思路出错,更换思路
  3)由于能传的数据量有限,所以我们将传的数据从歌曲对象换成歌曲的id
  4)在播放歌曲页面的onLoad函数中获取到歌曲的id,并发送请求到服务器,请求数据,并保存到状态中
  5)使用状态数据实现页面动态渲染,通过wx.setNavigationBarTitle设置播放歌曲页面标题


29.播放歌曲模块(重点:音乐播放)
  1)由于我们请求回来的歌曲数据中没有音频资源的地址,所以需要再请求另一个专门用户获取音频资源地址的接口
  2)将请求得到的音频资源数据保存至页面状态
  3)优化代码!!!
	问题:用户可能点击每日推荐的某个选项,但是跳转到song页面之后并不播放
	解决:等用户真的有播放歌曲的意愿,再发送请求(点击播放按钮时)
  4)通过wx.getBackgroundAudioManager,获得背景音频的播放器实例
  5)给实例添加属性src和title,当src的值为新值时候,背景音频会自动播放,出现问题!!!
	问题:控制台报错提示,该功能需要配置才能使用
	解决:在app.json中配置requiredBackgroundModes属性

30.播放歌曲模块(播放状态显示BUG-1,重点:跨页面通信)
  问题:当song页面开始播放音乐,然后用户返回上个页面,再次进入song页面,当前显示的播放状态不对
  解决方法:
  1)需要将歌曲的播放状态保存起来,分析需求!!!
	需求:如果当前页面展现的歌曲的ID跟上次处于播放状态的歌曲ID相同,你当前页面应该是播放状态
	细化拆分:
		1.需要知道上一首歌是否处于播放状态
		2.需要知道上一首歌到底是哪一首
  2)已知我们需要保存的数据,出现问题!!!
	问题:数据保存在哪里
	知识点:可以通过getApp方法可以获取到App的实例对象
	理解:此时App的globalData效果类似于React中的context和Vuex的state,可以存储数据,也可以实现跨页面通信
	解决:将数据储存在App的实例对象的globalData属性上
  3)当用户点击播放按钮时,需要去修改globalData中存储的播放状态
  4)当song页面加载时,我们需要去判断当前是否有歌曲在播放,并且播放的是不是当前song页面显示的歌曲
	如果当前有歌曲在播放并且就是当前song页面显示的歌曲,将song页面的isPlay状态改成正确状态
	如果没有歌曲播放或者不是当前显示的歌曲,不做处理


31.播放歌曲模块(播放状态显示BUG-2)
  问题:修改音频播放状态方法,除了用户在小程序的song页面操作,还可以通过手机任务栏等其他地方进行修改,
         然而这些地方的修改我们并未做出相应的处理
  1)由于用户有多种途径修改背景音频的播放状态,我们需要去监听歌曲的播放状态
  2)当用户改变了歌曲的播放状态,我们也要同步去修改song页面的播放状态和globalData中的播放状态
  3)效果实现,看似完美,出现问题!!!
	问题:首先进入song页面播放歌曲,退出之后,再次进入该页面,用任务栏控制背景音频播放,页面状态没反应
	原因:由于我们每次进入song页面,都会重新生成新的Page实例,并且重新渲染,所以this指向不对,无法更改当前的song页面实例
	解决1:每次onLoad时,将this保存至globalData,在背景音频的监听回调中获取最新的this
	解决2:每次onLoad时,都重新绑定背景音频的监听


32.播放歌曲模块(重点:npm包使用,页面通信)
  需求:实现上一首和下一首功能
  1)我们需要知道上一首和下一首歌曲的musicId,通过musicId去请求新歌的数据,出现问题!!!
	问题:song页面只有当前一首歌的数据,无法请求新歌数据
	思路:数据都在每日推荐页面,可以让两个页面进行通信,通知每日推荐页面当前需要的是上一首还是下一首歌曲的musicId
  2)使用npm包PubSub可以实现,出现问题!!!
	问题:小程序中如何使用npm包
	解决:word文档中有写明步骤
  3)安装完PubSub,在每日推荐页面订阅消息,在song页面发布消息,通知每日推荐页面,当前需要的是什么类型的musicId
  4)准备工作:对toSong函数进行修改,在跳转之前记录下当前所点击的列表项的index
  5)如果需要获取的是下一首歌的musicId就将index+1,反之则-1;
  6)通过index从列表数据中读取到对应歌曲的musicId,通过PubSub发送消息传递给song页面
  7)song页面通过订阅消息接收到的musicId,请求对应数据进行显示
  8)优化代码!!!
	问题:当用户切换的歌曲次数越多,页面订阅的switchType次数越来越多
	解决:将switchType消息的订阅放到onLoad中,防止多次订阅
  9)根据业务逻辑,优化代码!!!
	问题:当前歌曲正在播放,用户进行歌曲切换,页面C3效果明显卡顿
	解决:当点击歌曲切换时,将当前页面播放状态切换成暂停
 10)出现问题!!!
	问题:当处于第一首歌时,点击上一首,控制台出现报错(最后一首歌,点下一首也会)
	解决:对index进行判断,如果当前已经是第一首歌,返回最后一首歌的musicId

33.播放歌曲模块(进度条功能实现)
  1)绘制静态页面
  2)在data中常见两个状态分别存储当前时间和总时间,实现页面时间动态显示
  3)下载moment插件,将时间格式转换成分秒格式
  4)通过backgroundAudioManager实例身上获取currentTime属性,可以知道当前播放时间,
     配合onTimeUpdate事件,实现定时获取播放时间效果
  5)通过当前播放时间除以总时长得到当前播放的百分比进度,并保存至状态中,动态控制进度条前进
  6)使用wxs实现过滤器效果


34.播放歌曲模块(自动切换,性能优化)
  1)需求:当本次歌曲播放完毕,自动播放下一首
	分析:1.如何确定歌曲是否播放完毕,
	       2.如何让song页面播放下一首
  2)问题:每次点击播放都会重新发送请求,但是实际数据都是一样的
  思路:如果没有数据才需要发送请求,请求音频资源地址,如果有数据,只需要将暂停的状态切换成播放状态


35.对项目进行分包
